server:
  port: 8080

spring:
  datasource:
#    url: ${SPRING_DATASOURCE_URL}
#    username: ${SPRING_DATASOURCE_USERNAME}
#    password: ${SPRING_DATASOURCE_PASSWORD}
    url: jdbc:postgresql://localhost:5432/aston
    username: user
    password: password
  jpa:
    properties:
      hibernate:
        ddl-auto: none
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

    show-sql: true
  sql:
    init:
      mode: always
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json:
          add.type.header: false
          type.mapping: ${kafka.mapping.user-response-dto}, ${kafka.mapping.item}
    consumer:
      group-id:
        users-group-id: users-group-id
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: latest
      properties:
        spring.json:
          trusted.packages: ru.myapp.dto.*, ru.myapp.model.*
          value.type.strategy: type
          add.type.header: false
          type.mapping: ${kafka.mapping.user-response-dto}, ${kafka.mapping.item}

kafka:
  topics:
    users-topic: users-topic
    items-topic: items-topic
  mapping:
    user-response-dto: UserResponseDtoShort:ru.myapp.dto.response.UserResponseDtoShort
    item: Item:ru.myapp.model.Item

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui-custom.html

logging:
  level:
    ru.myapp: info
    root: warn
    org.springframework.web: debug

feign:
  client:
    name: todos-client
    url: https://jsonplaceholder.typicode.com
